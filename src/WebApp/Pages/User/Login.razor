@page "/login"

@using WebApp.Core.RequestModels
@using WebApp.Services.IdentityService
@using WebApp.States.AuthState

@layout EmptyLayout

@inject IIdentityService IdentityService
@inject NavigationManager _nav
@inject IAccountManagement _accountManagement

<div class="d-flex flex-column align-items-center justify-content-center rounded-4 border-secondary-subtle mt-5 p-3 bg-body-tertiary mx-auto border shadow"
     style="width: 40%;">

    <h2 class="mb-4 text-primary text-center">Login</h2>

    <TelerikForm Model="@_signInRequest"
                 Class="w-100"
                 OnValidSubmit="@ValidSubmit"
                 ButtonsLayout="FormButtonsLayout.Stretch">
        <FormValidation>
            <DataAnnotationsValidator></DataAnnotationsValidator>
        </FormValidation>
        <FormItems>
            <FormAutoGeneratedItems></FormAutoGeneratedItems>
        </FormItems>
        <FormButtons>
            <TelerikButton Class="mt-3" Rounded="@ThemeConstants.Button.Rounded.Full">Login</TelerikButton>
        </FormButtons>
    </TelerikForm>

    <p class="mt-3 text-center">
        Not a member?
        <a href="/register" class="text-secondary">Register</a>
    </p>

    <p class="mt-3 text-center">
        <a href="/" class="text-secondary">Back to home page</a>
    </p>
</div>

@code
{
    [CascadingParameter(Name = "Notification")]
    private TelerikNotification _notificatioRef { get; set; }
    private SignInRequest _signInRequest;

    protected override void OnInitialized()
    {
        _signInRequest = new();
        // Check uri for redirect page
        if (_nav.Uri != $"{_nav.BaseUri}login")
        {
            _nav.NavigateTo("/login");
        }
    }

    private async Task ValidSubmit()
    {
        var resultObject = await _accountManagement.Login(_signInRequest);
        if (resultObject.ResultCode.Equals(ResultCode.Success))
        {
            _notificatioRef.Show(
                text: resultObject.Messages,
                themeColor: ThemeConstants.Notification.ThemeColor.Light);
            _nav.NavigateTo("/");
            return;
        }
        _notificatioRef.Show(
            text: resultObject.Messages,
            themeColor: ThemeConstants.Notification.ThemeColor.Error);
    }
}
