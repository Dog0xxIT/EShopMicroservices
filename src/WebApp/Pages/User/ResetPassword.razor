@page "/reset-password"

@layout EmptyLayout

@using EShop.WebApp.Models.Common
@using EShop.WebApp.Models.Enums
@using EShop.WebApp.States
@using WebApp.Core
@using WebApp.Core.RequestModels
@using WebApp.Services.IdentityService

@inject IIdentityService IdentityService
@inject AlertState AlertState
@inject NavigationManager NavigationManager

<div class="px-6 py-12 flex min-h-full flex-col justify-center lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-sm">
        <img class="h-10 mx-auto w-auto" src="https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=600" alt="Your Company">
        <h2 class="mt-10 text-gray-900 text-center text-2xl font-bold leading-9 tracking-tight">Reset Password</h2>
    </div>

    <div class="mt-10 sm:mx-auto sm:w-full sm:max-w-sm">
        <EditForm Model="@_resetPasswordRequest" class="space-y-6" OnValidSubmit="@ValidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div>
                <label for="email" class="text-gray-900 block text-sm font-medium leading-6">Enter your email address</label>
                <div class="mt-2">
                    <InputText @bind-Value="@_resetPasswordRequest.Email" id="email" autocomplete="email" class="py-1.5 px-1.5 text-gray-900 ring-gray-300 block w-full rounded-md border-0 shadow-sm ring-1 ring-inset placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"></InputText>
                    <ValidationMessage For="() => _resetPasswordRequest.Email"></ValidationMessage>
                </div>
            </div>

            <div>
                <label for="new-password" class="text-gray-900 block text-sm font-medium leading-6">Enter your email address</label>
                <div class="mt-2">
                    <InputText @bind-Value="@_resetPasswordRequest.NewPassword" id="new-password" class="py-1.5 px-1.5 text-gray-900 ring-gray-300 block w-full rounded-md border-0 shadow-sm ring-1 ring-inset placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"></InputText>
                    <ValidationMessage For="() => _resetPasswordRequest.Email"></ValidationMessage>
                </div>
            </div>

            <div>
                <label for="reset-code" class="text-gray-900 block text-sm font-medium leading-6">Enter your email address</label>
                <div class="mt-2">
                    <InputText @bind-Value="@_resetPasswordRequest.Email" id="reset-code" class="py-1.5 px-1.5 text-gray-900 ring-gray-300 block w-full rounded-md border-0 shadow-sm ring-1 ring-inset placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"></InputText>
                    <ValidationMessage For="() => _resetPasswordRequest.ResetCode"></ValidationMessage>
                </div>
            </div>

            <div>
                <button type="submit" class="bg-indigo-600 px-3 py-1.5 text-white flex w-full justify-center rounded-md text-sm font-semibold leading-6 shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Reset password</button>
            </div>
        </EditForm>
    </div>
    
    <p class="mt-10 text-gray-500 text-center text-sm">
        <a href="/" class="text-indigo-600 font-semibold leading-6 hover:text-indigo-500">Back to home page</a>
    </p>
</div>

@code
{
    private ResetPasswordRequest _resetPasswordRequest;

    protected override void OnInitialized()
    {
        _resetPasswordRequest = new();
    }

    private async Task ValidSubmit()
    {
        var resultObject = await IdentityService.ResetPassword(_resetPasswordRequest);
        if (resultObject.ResultCode.Equals(ResultCode.Success))
        {
            AlertState.AddMessage(new AlertItem
                {
                    Message = resultObject.Messages,
                    Title = "Success",
                    Type = AlertType.Success
                });
            NavigationManager.NavigateTo("/");
            return;
        }
        AlertState.AddMessage(new AlertItem
            {
                Message = resultObject.Messages,
                Title = "Error",
                Type = AlertType.Danger
            });
    }
}
